plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.12'
}

group = 'server'
version = '1.0.0'
sourceCompatibility = '17'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation 'junit:junit:4.13.1'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'net.rgielen:javafx-weaver-spring:1.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
}

javafx {
    version = '17.0.2'
    modules = [ 'javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.media' ]
    configuration = 'implementation'
}

sourceSets {
    common {
        main {
            java {
                srcDir 'src/common/main/java'
            }
        }
        test {
            java {
                srcDir 'src/common/test/java'
            }
        }
    }
    server {
        main {
            java {
                srcDir 'src/server/main/java'
            }
        }
        resources {
            srcDir 'src/server/resources'
        }
        test {
            srcDir 'src/server/test/java'
        }
        compileClasspath += common.output
        runtimeClasspath += common.output
    }
    client {
        main {
            java {
                srcDir 'src/client/main/java'
            }
        }
        resources {
            srcDir 'src/client/resources'
        }
        test {
            srcDir 'src/client/test/java'
        }
        compileClasspath += common.output
        runtimeClasspath += common.output
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

test {
    defaultCharacterEncoding = 'UTF-8'
    useJUnitPlatform()
}

